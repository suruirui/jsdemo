myJSON = {
		stringify: function(val) {
				var result = '',
					curVal; // 判断是否为null    
					    if (val === null){      
					          return null; // null不变    
					              }        // typeof 只能判断基本类型，即'number','string','undefined','boolean',而对于数组、对象等则统一返回'object'.        switch (typeof val){            case 'number':            case 'boolean':                return val; //这两种类型返回原值            case 'string': // string类型加上双引号                return '\"' + val + '\"';            case 'undefined':            case 'function': // 这两种类型被忽略                return undefined;        }        // 以下类型不能使用typeof判断，比较简便的方法是使用Object.prototype.toString.call()来确定类型。        switch (Object.prototype.toString.call(val)){            case '[object Array]': // array                result += '[';                for(var i = 0; i < val.length; i++){                    curVal = myJSON.stringify(val[i]); // 对数组中的每个元素分别调用本方法                    if (curVal === undefined){                        curVal = null; // 数组中的undefined被转为null                    }                    result += curVal + ',';                }                result = result.slice(0, -1); //去掉最后的','                result += ']';                return result;             case '[object Date]': // date类型的toJSON()方法如果不能用则直接转为string.                 return '\"' + (val.toJSON ? val.toJSON() : val.toString()) + '\"';             case '[object RegExp]': // 正则表达式只保留大括号                 return "{}";             case '[object Object]': // 处理object类型                result += '{';                for(var key in val){ //遍历key                    if(val.hasOwnProperty(key)){                        curVal = myJSON.stringify(val[key]);                         if(curVal !== undefined){                            result += '\"' + key + '\":' + curVal + ','; //忽略undefined                        }                    }                 }                result = result.slice(0, -1);  //去掉最后的','                result += '}';                  return result;        }    }}
				​